# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import user_pb2 as user__pb2


class UserStub(object):
    """Servicio de usuarios (todo lo síncrono via gRPC).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/user.User/Register',
                request_serializer=user__pb2.RegisterRequest.SerializeToString,
                response_deserializer=user__pb2.RegisterResponse.FromString,
                )
        self.Authenticate = channel.unary_unary(
                '/user.User/Authenticate',
                request_serializer=user__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=user__pb2.AuthenticateResponse.FromString,
                )
        self.GetProfile = channel.unary_unary(
                '/user.User/GetProfile',
                request_serializer=common__pb2.UserRef.SerializeToString,
                response_deserializer=user__pb2.UserProfile.FromString,
                )
        self.UpdateName = channel.unary_unary(
                '/user.User/UpdateName',
                request_serializer=user__pb2.UpdateNameRequest.SerializeToString,
                response_deserializer=user__pb2.UserProfile.FromString,
                )


class UserServicer(object):
    """Servicio de usuarios (todo lo síncrono via gRPC).
    """

    def Register(self, request, context):
        """Crea un usuario nuevo. Devuelve el ID asignado.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """Autentica por email+password. (En esta versión simple no hay JWT).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfile(self, request, context):
        """Obtiene el perfil básico.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateName(self, request, context):
        """Actualiza el nombre mostrado del usuario.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=user__pb2.RegisterRequest.FromString,
                    response_serializer=user__pb2.RegisterResponse.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=user__pb2.AuthenticateRequest.FromString,
                    response_serializer=user__pb2.AuthenticateResponse.SerializeToString,
            ),
            'GetProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProfile,
                    request_deserializer=common__pb2.UserRef.FromString,
                    response_serializer=user__pb2.UserProfile.SerializeToString,
            ),
            'UpdateName': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateName,
                    request_deserializer=user__pb2.UpdateNameRequest.FromString,
                    response_serializer=user__pb2.UserProfile.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.User', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class User(object):
    """Servicio de usuarios (todo lo síncrono via gRPC).
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.User/Register',
            user__pb2.RegisterRequest.SerializeToString,
            user__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.User/Authenticate',
            user__pb2.AuthenticateRequest.SerializeToString,
            user__pb2.AuthenticateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.User/GetProfile',
            common__pb2.UserRef.SerializeToString,
            user__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.User/UpdateName',
            user__pb2.UpdateNameRequest.SerializeToString,
            user__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
