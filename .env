# ===========================
# CONFIGURACIÓN GLOBAL
# ===========================
SERVICE_ENV=dev
RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
EVENTS_EXCHANGE=mybookstore.events

# ===========================
# MICROSERVICIO: USER (backend)
# ===========================
USER_GRPC_PORT=50055
USER_DB_PATH=/data/user.db          # ruta dentro del contenedor (ver Dockerfile)
USER_LOG_LEVEL=info

# ===========================
# FRONTEND USER
# ===========================
USER_GRPC_ADDR=user:50055           # host:puerto del contenedor backend
HTTP_ADDR=:8080                     # frontend escucha en 8080


# ===========================
# MICROSERVICIO: PAYMENT (backend)
# ===========================
PAYMENT_GRPC_PORT=50053
PAYMENT_SQLITE_PATH=/data/payment.db    # base de datos local SQLite
PAYMENT_LOG_LEVEL=info
PAYMENT_REQUEST_QUEUE=payment.charge.requested
PAYMENT_CONSUMER_TAG=payment-service
PAYMENT_PREFETCH_COUNT=10

# ===========================
# FRONTEND PAYMENT
# ===========================
FRONTEND_PAYMENT_PORT=8084              # puerto HTTP del frontend de pagos
PAYMENT_GRPC_ADDR=payment:50053         # host:puerto del backend payment


# ===========================
# MICROSERVICIO: ORDER (backend)
# ===========================
ORDER_GRPC_PORT=50054                   # puerto gRPC del servicio Order
ORDER_DB_PATH=/data/order.db            # SQLite del microservicio Order
ORDER_LOG_LEVEL=info
ORDER_CART_GRPC_ADDR=cart:50051         # Cart para consulta síncrona del carrito
ORDER_RABBITMQ_URL=${RABBITMQ_URL}      # reutiliza la URL global
ORDER_EVENTS_EXCHANGE=${EVENTS_EXCHANGE}# reutiliza el exchange global
ORDER_CONSUMER_TAG=order-service        # etiqueta del consumidor en RabbitMQ
ORDER_PREFETCH_COUNT=10                 # (opcional) prefetch para el consumidor

# ===========================
# FRONTEND ORDER
# ===========================
FRONTEND_ORDER_PORT=8083                # puerto HTTP del frontend de órdenes
# Variables que el binario del frontend realmente lee:
FRONTEND_ADDR=:8083                     # addr HTTP del frontend (server.go)
ORDER_SVC_ADDR=order:50054              # addr gRPC del servicio Order


# ===========================
# MICROSERVICIO: INVENTORY (backend)
# ===========================
INVENTORY_GRPC_PORT=50052                 # puerto gRPC del servicio Inventory
INVENTORY_DB_PATH=/data/inventory.db      # SQLite del microservicio Inventory
INVENTORY_LOG_LEVEL=info
INVENTORY_SEED=true                       # para sembrar stock inicial en dev

# RabbitMQ (usa los globales y define colas específicas de inventario)
INVENTORY_RABBITMQ_URL=${RABBITMQ_URL}    # reutiliza la URL global
INVENTORY_EVENTS_EXCHANGE=${EVENTS_EXCHANGE}

# Colas de trabajo de inventario (coinciden con el código)
Q_INVENTORY_RESERVE_REQUEST=inventory.reserve.request
Q_INVENTORY_RESERVE_RESULT=inventory.reserve.result
Q_INVENTORY_CONFIRM_REQUEST=inventory.confirm.request
Q_INVENTORY_RELEASE_REQUEST=inventory.release.request

INVENTORY_CONSUMER_TAG=inventory-service
INVENTORY_PREFETCH_COUNT=10

# ===========================
# FRONTEND INVENTORY
# ===========================
FRONTEND_INVENTORY_PORT=8082              # puerto HTTP del frontend de inventario
FRONTEND_INVENTORY_ADDR=:8082             # addr HTTP que escucha el server.go del frontend
INVENTORY_GRPC_ADDR=inventory:50052       # host:puerto del backend Inventory (dentro de la red Docker)


# ===========================
# MICROSERVICIO: CATALOG (backend)
# ===========================
CATALOG_GRPC_PORT=50051                   # puerto gRPC del servicio Catalog
CATALOG_DB_PATH=/data/catalog.db          # SQLite del microservicio Catalog
CATALOG_LOG_LEVEL=info
# Opcional (por si en el futuro publicas eventos desde catálogo)
CATALOG_RABBITMQ_URL=${RABBITMQ_URL}
CATALOG_EVENTS_EXCHANGE=${EVENTS_EXCHANGE}

# ===========================
# FRONTEND CATALOG
# ===========================
FRONTEND_CATALOG_PORT=8081                # puerto HTTP del frontend de catálogo
FRONTEND_CATALOG_ADDR=:8081               # addr HTTP que escucha el server.go del frontend
CATALOG_GRPC_ADDR=catalog:50051           # host:puerto del backend Catalog

# ===========================
# MICROSERVICIO: CART (backend)
# ===========================
CART_GRPC_PORT=50050                    # puerto gRPC del servicio Cart
CART_DB_PATH=/data/cart.db              # SQLite local del microservicio Cart
CART_LOG_LEVEL=info

# Publicación de eventos (opcional, si Cart emite checkout u otros)
CART_RABBITMQ_URL=${RABBITMQ_URL}       # reutiliza la URL global
CART_EVENTS_EXCHANGE=${EVENTS_EXCHANGE} # reutiliza el exchange global
# Nota: Cart típicamente solo publica; no requiere colas/consumer_tag propios

# ===========================
# FRONTEND CART
# ===========================
FRONTEND_CART_PORT=8085                 # puerto HTTP expuesto del frontend de carrito

# Variables que el binario del frontend realmente lee:
GATEWAY_HTTP_ADDR=:8085                 # addr HTTP del frontend (server.go del gateway)
CART_GRPC_TARGET=cart:50050             # addr gRPC del backend Cart dentro de la red Docker
